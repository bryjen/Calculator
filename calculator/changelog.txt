v1.0
REWORK
    -   Using Spectre.Console to display output instead of the standard Console.Write(Line)() method.
    
    -   Using NUnit to create unit tests for the program
    (remarks: (1) the tests in the "tests" directory are only temporary and will be improved later. For now, it only serves
    as a test. (2) There is problem trying to use Rider's way of implementing unit tests, so I have to figure how to make them
    by myself)
    
    -   Using CommandLineParser to parse command line arguments. Right now, there are only one program argument, that being 
    "--t" or "--tests" (default: false, required: false) which will enable unit testing mode if set to true.
    Future arguments may include the ability to turn colors on/off, debug mode (which displays extra info like time taken for calculatrion,
    the list form of the equation, etc.), etc.
    
    -   Added Expression.GetExpressionInListForm(), an improved version of last version's Expression.GetExpressionInArrayForm()
        -   Multiplication signs are now automatically added when there is a left parenthesis following it:
            ("a(b)" => "a * (b)")
        -   Negative signs are now grouped if it is resenting negation (follows nothing/a left parenthesis)
            -3 + 2 used to give [-,3, +, 2], now [-3, +, 2]
        -   If a term consists of a variable and a (visible) coefficient, the function will split them
            5a => [5, *, a], for now, it doesn't matter if the variable is defined or not. That will be checked later
            
v1.1
    -   Polished up the unit test interface such that the user can see whether the program passed the test or not, then see its details
    by entering the name of the test. This includes details of expected and got results. The tests test for an expression's validity
    (whether it was able to correctly tell if the expression is valid or not) and its answer (whether or not it was able to solve the
    expression correctly)
    
    -   Added and polished methods from the pre-rework version such as CheckMethods.IsAValidOperator(string), CheckMethods.IsANumber(token),
    ExpressionManipulation.InfixToPostfix(String[]), Expression.IsExpressionValid(), Expression.Solve()
    Furthermore, documented these methods using XML documentation
    
v1.2
    -   
    ex.             Re-Implemented dynamic variables - variables that change value if the values of the variables in their expression changes (if             
    > a = 1         it has any variables)
    > b = a + 1 
    > c = b
    > c
    2
    > a = 100
    > c 
    101
    
    -   Added constants such as pi, e, and tau. Constants are case-insensitive (meaning you can call them regardless of them being
    upper or lowercase) and cannot be re-assigned.
    
    -   Implementing / WIP : Adding and polishing the unit testing interface, and the unit tests themselves. Currently adding 
    more tests that test the capabilities of the program
    
v1.3
    -   Added the "ans" variable. It stores the values of the previous expression and cannot be re-assigned. 
    
    -   Added basic commands such as /help, /clear and /exit. Executing just /help (without any tokens) will show details 
    about the current mode. /clear clears the console and /exit exits the application
    
    -   (Basically) Finished implementing the unit testing mode. It is tested using both normal and variable tests, where
    normal tests test the ability of the program to compute, while variable tests test not only the program's ability to compute,
    but also its ability to recognize variables and constants.
    
    Additionally changed the --t / --tests program arguments to take the name of the mode that is to be tested. If the
    given mode does not match any existing modes, the program will not run.
    
    -   Fixed a few bugs where the program would not cancel out pluses and minuses if not ordered correctly.
    
    -   Rearranged some code + files to make the program more compact
    
v1.3.1
    - Added recognition of trigonometric functions (sin, cos, tan, csc, sec, cot, arcsin, arccos, arctan). Refactored the code so ExpressionManipulation.GetExpressionInListForm(string) recognizes these functions and adds parentheses to the values in these functions.
    Ex. 5tan5x+1 => 5 * tan ( 5 * x ) + 1